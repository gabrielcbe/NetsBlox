<blocks app="NetsBlox 1.14.0, http://netsblox.org" version="1.14.0"><block-definition collabId="item_1_29" s="costume from url v2 %&apos;url&apos;" type="reporter" category="looks"><header></header><code></code><inputs><input type="%txt"></input></inputs><script><block collabId="item_1_23" s="doReport"><block collabId="item_1_22" s="evaluate"><block collabId="item_1_21" s="reportJSFunction"><list><l>url</l><l>proc</l></list><l>if (!proc.requestedImage) {&#xD;    // Create new request&#xD;    proc.requestedImage = new Image();&#xD;    proc.requestedImage.crossOrigin = &apos;Anonymous&apos;;&#xD;    proc.requestedImage.src = url;&#xD;    proc.requestedImage.onerror = function(event) {&#xD;        proc.requestedImage.error = event;&#xD;    };&#xD;} else if (proc.requestedImage.complete &amp;&amp; proc.requestedImage.naturalWidth) {&#xD;    // Clear request&#xD;    image = proc.requestedImage;&#xD;    proc.requestedImage = null;&#xD;    return new Costume(image, &apos;image&apos;);&#xD;} else if (proc.requestedImage.error) {&#xD;    if (proc.requestedImage.fatal) {&#xD;        proc.requestedImage = null;&#xD;        throw Error(&apos;Could not retrieve image&apos;);        &#xD;    }&#xD;    proc.requestedImage = null;&#xD;    proc.requestedImage = new Image();&#xD;    proc.requestedImage.crossOrigin = &apos;Anonymous&apos;;&#xD;    proc.requestedImage.src = &apos;https://crossorigin.me/&apos; + url&#xD;    proc.requestedImage.fatal = true;&#xD;}&#xD;proc.pushContext(&apos;doYield&apos;);&#xD;proc.pushContext();</l></block><list><block collabId="item_1_15" var="url"/></list></block></block></script></block-definition><block-definition collabId="item_1_14" s="costume from url %&apos;url&apos;" type="reporter" category="looks"><header></header><code></code><inputs><input type="%txt"></input></inputs><script><block collabId="item_1_8" s="doReport"><block collabId="item_1_7" s="evaluate"><block collabId="item_1_6" s="reportJSFunction"><list><l>url</l><l>proc</l></list><l>function loadImage(url) {&#xD;  return new Promise((resolve, reject) =&gt; {&#xD;    let img = new Image();&#xD;&#xD;    img.onload = function () {&#xD;      let canvas = newCanvas(new Point(img.width, img.height), true);&#xD;      canvas.getContext(&apos;2d&apos;).drawImage(img, 0, 0);&#xD;      let costume = new Costume(canvas, Date.now());&#xD;      console.log(&apos;image loaded&apos;, canvas, costume);&#xD;      resolve(costume);&#xD;    };&#xD;&#xD;    img.src = url;&#xD;  })&#xD;}&#xD;&#xD;let rv = proc.runAsyncFn(loadImage, {args: [url]});&#xD;if (rv !== undefined) return rv;&#xD;</l></block><list><block collabId="item_1" var="url"/></list></block></block></script></block-definition></blocks>